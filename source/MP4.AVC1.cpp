/*******************************************************************************
 * Copyright (c) 2016, Rory Hool
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include "MP4.AVC1.h"
#include "hex.h"

using namespace MP4;

std::string AVC1::getContent( void )
{
    std::ostringstream o;
    
    o << "Data Reference Index:  " << this->_dataReferenceIndex << "\n";
    o << "Predefined:            " << this->_predefined[0] << " " << this->_predefined[1] << " " << this->_predefined[2] << "\n";
    o << "Width:                 " << this->_width << "\n";
    o << "Height:                " << this->_height << "\n";
    o << "Horizontal Resolution: " << this->_horizontalResolution << "\n";
    o << "Vertical Resolution:   " << this->_verticalResolution << "\n";
    o << "Frame Count:           " << this->_frameCount << "\n";
    o << "Depth:                 " << this->_depth << "\n";
    
    return o.str();
}

void AVC1::processData( MP4::BinaryStream * stream, uint64_t length )
{
    (void) length;
    stream->ignore(6);
    
    _dataReferenceIndex = stream->readBigEndianUnsignedShort();
    
    stream->readBigEndianUnsignedShort();
    stream->readBigEndianUnsignedShort();
    
    _predefined[0] = stream->readBigEndianUnsignedInteger();
    _predefined[1] = stream->readBigEndianUnsignedInteger();
    _predefined[2] = stream->readBigEndianUnsignedInteger();
    
    _width = stream->readBigEndianUnsignedShort();
    _height = stream->readBigEndianUnsignedShort();
    
    _horizontalResolution = stream->readBigEndianFixedPoint( 16, 16 );
    _verticalResolution   = stream->readBigEndianFixedPoint( 16, 16 );
    
    stream->readBigEndianUnsignedInteger();
    
    _frameCount = stream->readBigEndianUnsignedShort();
    
    uint8_t compressornameDisplayAbleData = stream->readUnsignedChar();
    if( compressornameDisplayAbleData > 31 ) {
        compressornameDisplayAbleData = 31;
    }
    stream->ignore(compressornameDisplayAbleData);
    
    if( compressornameDisplayAbleData < 31 ) {
        stream->ignore(31 - compressornameDisplayAbleData );
    }
    _depth = stream->readBigEndianUnsignedShort();
    stream->readBigEndianUnsignedShort();
}
